#!/usr/bin/env python

PACKAGE = "hybrid_astar"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

gen.add("enabled", bool_t, 0, "Enable/disable the layer", True)
gen.add("simplify_polygons", bool_t, 0, "Simplify the polygons if enabled (will simplify with specified tolerance over specified point size)", True)
gen.add("simplification_tolerance", double_t, 0, "Tolerance for simplification of obstacles in map (m), uses Douglas-Peucker (OpenCV)", 0.025, 0.0, 0.5)
gen.add("removal_threshold", int_t, 0, "Score threshold for removal of obstacles (once an obstacle has been confirmed and has fallen below this value)", 50, 0, 100)
gen.add("confirmation_threshold", int_t, 0, "Score threshold for confirming that an obstacle is valid", 1000, 0, 1000)
gen.add("max_confirmation_score", int_t, 0, "Maximum obstacle confirmation score", 2500, 0, 10000)
gen.add("lower_size_threshold", double_t, 0, "Lower size threshold for contour detection in the costmap image (perimiter length of the detected polygon)", 20.0, -2, 500)
gen.add("upper_size_threshold", double_t, 0, "Upper size threshold above which the obstacles will be discarded (perimiter length of the detected polygon)", 2000, 0, 5000)
gen.add("approx_poly_accuracy", double_t, 0, "Approximation accuracy of the internally running Douglas-Peucker simplification for initially detected polygons", 4.0, 0.0, 15.0)
gen.add("intensity_threshold", double_t, 0, "Intensity threshold for validation of obstacle validity (average intensity in rectangular region of 9 pixels around each corner point)", 20.0, 0.0, 300.0)
gen.add("shelf_inflation", double_t, 0, "Inflation of shelf database objects before excluding from the received costmap", 0.3, 0.0, 5.0)
gen.add("use_hausdorff", bool_t, 0, "Use hausdorff distance check to avoid merging similar matches", False)
gen.add("hausdorff_threshold", double_t, 0, "Hausdorff distance similarity threshold", 0.3, 0.0, 5.0)
gen.add("merge_distance_threshold", double_t, 0, "Distance threshold (in m) for merging adjacent obstacles", 0.01, 0.0, 0.5)
gen.add("box_filter_threshold", double_t, 0, "Threshold internally used on box filter, will clear pixels with region intensity below this", 0.4, 0.0, 1.0)
gen.add("scoring_multiplier", int_t, 0, "Scoring multiplier: the bigger, the faster scores go up or down", 10, 0, 100)
gen.add("angle_threshold", double_t, 0, "Flat angle threshold under which detections will not be checked (due to scanner)", 25.0, 0.0, 100.0)
gen.add("restore_defaults", bool_t, 0, "Restore default configuration", False)

exit(gen.generate(PACKAGE, "toru_navigation_layers", "MappingLayer"))
